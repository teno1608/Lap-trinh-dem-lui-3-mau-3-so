
AVRASM ver. 2.1.30  D:\Soft working\Lap trinh dem lui 3 mau 3 so\List\demlui3m3s.asm Fri Nov 27 14:30:27 2015

D:\Soft working\Lap trinh dem lui 3 mau 3 so\List\demlui3m3s.asm(1057): warning: Register r4 already defined by the .DEF directive
D:\Soft working\Lap trinh dem lui 3 mau 3 so\List\demlui3m3s.asm(1058): warning: Register r6 already defined by the .DEF directive
D:\Soft working\Lap trinh dem lui 3 mau 3 so\List\demlui3m3s.asm(1059): warning: Register r8 already defined by the .DEF directive
D:\Soft working\Lap trinh dem lui 3 mau 3 so\List\demlui3m3s.asm(1060): warning: Register r10 already defined by the .DEF directive
D:\Soft working\Lap trinh dem lui 3 mau 3 so\List\demlui3m3s.asm(1061): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega8
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _d_type=R4
                 	.DEF _donvi=R6
                 	.DEF _chuc=R8
                 	.DEF _tram=R10
                 	.DEF _d_anod=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c038      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c20c      	RJMP _timer1_ovf_isr
000009 c1ed      	RJMP _timer0_ovf_isr
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000013 0000      	.DW  0x0000
                 
                 _0x3:
D:\Soft working\Lap trinh dem lui 3 mau 3 so\List\demlui3m3s.asm(1095): warning: .cseg .db misalignment - padding zero byte
000014 0029      	.DB  0x29
                 _0x4:
D:\Soft working\Lap trinh dem lui 3 mau 3 so\List\demlui3m3s.asm(1097): warning: .cseg .db misalignment - padding zero byte
000015 0029      	.DB  0x29
                 _0x5:
D:\Soft working\Lap trinh dem lui 3 mau 3 so\List\demlui3m3s.asm(1099): warning: .cseg .db misalignment - padding zero byte
000016 000a      	.DB  0xA
                 _0x6:
000017 003f
000018 0006
000019 005b
00001a 004f      	.DB  0x3F,0x0,0x6,0x0,0x5B,0x0,0x4F,0x0
00001b 0066
00001c 006d
00001d 007d
00001e 0007      	.DB  0x66,0x0,0x6D,0x0,0x7D,0x0,0x7,0x0
00001f 007f
D:\Soft working\Lap trinh dem lui 3 mau 3 so\List\demlui3m3s.asm(1103): warning: .cseg .db misalignment - padding zero byte
000020 006f      	.DB  0x7F,0x0,0x6F
                 _0x154:
000021 0000
000022 0000
000023 0000
000024 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000025 0000      	.DB  0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000026 0001      	.DW  0x01
000027 0002      	.DW  0x02
000028 0026      	.DW  __REG_BIT_VARS*2
                 
000029 0001      	.DW  0x01
00002a 0172      	.DW  _cou_r_pre
00002b 0028      	.DW  _0x3*2
                 
00002c 0001      	.DW  0x01
00002d 0174      	.DW  _cou_g_pre
00002e 002a      	.DW  _0x4*2
                 
00002f 0001      	.DW  0x01
000030 0176      	.DW  _cou_y_pre
000031 002c      	.DW  _0x5*2
                 
000032 0013      	.DW  0x13
000033 017e      	.DW  _seg_array
000034 002e      	.DW  _0x6*2
                 
000035 000a      	.DW  0x0A
000036 0004      	.DW  0x04
000037 0042      	.DW  _0x154*2
                 
                 _0xFFFFFFFF:
000038 0000      	.DW  0
                 
                 __RESET:
000039 94f8      	CLI
00003a 27ee      	CLR  R30
00003b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003c e0f1      	LDI  R31,1
00003d bffb      	OUT  GICR,R31
00003e bfeb      	OUT  GICR,R30
00003f bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000040 e1f8      	LDI  R31,0x18
000041 bdf1      	OUT  WDTCR,R31
000042 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e4ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 c1be      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Chip type               : ATmega8
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;int d_type=0, donvi, chuc, tram, d_anod=0, cou_dr=0, cou_dg=0, cou_dy=0, i=0;
                 ;int cou_r=0, cou_g=0, cou_y=0, cou_1s=0, f_yell=0;
                 ;int cou_r_pre=41, cou_g_pre=41, cou_y_pre=10, f_red=0, f_gree=0, kds_cv=0;
                 
                 	.DSEG
                 ;bit f_cv=0, gree=0, yell=0, red=0;
                 ;
                 ;#define li_r PINB.1
                 ;#define li_g PINB.2
                 ;
                 ;#define leddch PORTC.0
                 ;#define ledxch PORTC.1
                 ;#define ledvdv PORTC.2
                 ;#define ledxdv PORTC.3
                 ;#define ledddv PORTC.4
                 ;#define ledxtr PORTC.5
                 ;#define leddtr PORTB.5
                 ;
                 ;#include <setup_interupt.c>
                 ;
                 ;
                 ;void set_interupt01(){
                 ; 0000 001F void set_interupt01(){
                 
                 	.CSEG
                 _set_interupt01:
                 ;
                 ;// Timer/Counter 0 initialization
                 ;// Clock source: System Clock
                 ;// Clock value: 125.000 kHz
                 ;TCCR0=0x03;
000068 e0e3      	LDI  R30,LOW(3)
000069 bfe3      	OUT  0x33,R30
                 ;TCNT0=0x82;
00006a e8e2      	LDI  R30,LOW(130)
00006b bfe2      	OUT  0x32,R30
                 ;
                 ;// Timer/Counter 1 initialization
                 ;// Clock source: System Clock
                 ;// Clock value: 1000.000 kHz
                 ;// Mode: Normal top=0xFFFF
                 ;// OC1A output: Discon.
                 ;// OC1B output: Discon.
                 ;// Noise Canceler: Off
                 ;// Input Capture on Falling Edge
                 ;// Timer1 Overflow Interrupt: On
                 ;// Input Capture Interrupt: Off
                 ;// Compare A Match Interrupt: Off
                 ;// Compare B Match Interrupt: Off
                 ;TCCR1A=0x00;
00006c e0e0      	LDI  R30,LOW(0)
00006d bdef      	OUT  0x2F,R30
                 ;TCCR1B=0x02;
00006e e0e2      	LDI  R30,LOW(2)
00006f bdee      	OUT  0x2E,R30
                 ;TCNT1H=0x9E;
000070 d23d      	RCALL SUBOPT_0x0
                 ;TCNT1L=0x57;
                 ;ICR1H=0x00;
000071 d241      	RCALL SUBOPT_0x1
                 ;ICR1L=0x00;
                 ;OCR1AH=0x00;
                 ;OCR1AL=0x00;
                 ;OCR1BH=0x00;
                 ;OCR1BL=0x00;
                 ;
                 ;// Timer(s)/Counter(s) Interrupt(s) initialization
                 ;TIMSK=0x05;
000072 e0e5      	LDI  R30,LOW(5)
000073 bfe9      	OUT  0x39,R30
                 ;
                 ;// Global enable interrupts
                 ;#asm("sei")
000074 9478      	sei
                 ;
                 ;}
000075 9508      	RET
                 ;
                 ;void reset_interupt01(){
                 _reset_interupt01:
                 ;
                 ;// Timer/Counter 0 initialization
                 ;// Clock source: System Clock
                 ;// Clock value: Timer 0 Stopped
                 ;TCCR0=0x00;
000076 e0e0      	LDI  R30,LOW(0)
000077 bfe3      	OUT  0x33,R30
                 ;TCNT0=0x00;
000078 bfe2      	OUT  0x32,R30
                 ;
                 ;// Timer/Counter 1 initialization
                 ;// Clock source: System Clock
                 ;// Clock value: Timer1 Stopped
                 ;// Mode: Normal top=0xFFFF
                 ;// OC1A output: Discon.
                 ;// OC1B output: Discon.
                 ;// Noise Canceler: Off
                 ;// Input Capture on Falling Edge
                 ;// Timer1 Overflow Interrupt: Off
                 ;// Input Capture Interrupt: Off
                 ;// Compare A Match Interrupt: Off
                 ;// Compare B Match Interrupt: Off
                 ;TCCR1A=0x00;
000079 bdef      	OUT  0x2F,R30
                 ;TCCR1B=0x00;
00007a bdee      	OUT  0x2E,R30
                 ;TCNT1H=0x00;
00007b bded      	OUT  0x2D,R30
                 ;TCNT1L=0x00;
00007c bdec      	OUT  0x2C,R30
                 ;ICR1H=0x00;
00007d d235      	RCALL SUBOPT_0x1
                 ;ICR1L=0x00;
                 ;OCR1AH=0x00;
                 ;OCR1AL=0x00;
                 ;OCR1BH=0x00;
                 ;OCR1BL=0x00;
                 ;
                 ;// Timer(s)/Counter(s) Interrupt(s) initialization
                 ;TIMSK=0x00;
00007e e0e0      	LDI  R30,LOW(0)
00007f bfe9      	OUT  0x39,R30
                 ;
                 ;// Global disable interrupts
                 ;#asm("cli")
000080 94f8      	cli
                 ;
                 ;}
000081 9508      	RET
                 ;#include <segdisplay.c>
                 ;
                 ;
                 ;// Define seg a >>> g PORTD
                 ;
                 ;int seg_array[11]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x00};
                 
                 	.DSEG
                 ;
                 ;void seg_display(char var7seg)
                 ; 0000 0020     {
                 
                 	.CSEG
                 _seg_display:
                 ;    switch (var7seg)
                 ;	var7seg -> Y+0
000082 81e8      	LD   R30,Y
000083 e0f0      	LDI  R31,0
                 ;        {
                 ;        case 0: PORTD=seg_array[0];
000084 9730      	SBIW R30,0
000085 f419      	BRNE _0xA
000086 91e0 017e 	LDS  R30,_seg_array
000088 c045      	RJMP _0x151
                 ;                break;
                 ;        case 1: PORTD=seg_array[1];
                 _0xA:
000089 30e1      	CPI  R30,LOW(0x1)
00008a e0a0      	LDI  R26,HIGH(0x1)
00008b 07fa      	CPC  R31,R26
00008c f419      	BRNE _0xB
                +
00008d 91e0 0180+LDS R30 , _seg_array + ( 2 )
                 	__GETB1MN _seg_array,2
00008f c03e      	RJMP _0x151
                 ;                break;
                 ;        case 2: PORTD=seg_array[2];
                 _0xB:
000090 30e2      	CPI  R30,LOW(0x2)
000091 e0a0      	LDI  R26,HIGH(0x2)
000092 07fa      	CPC  R31,R26
000093 f419      	BRNE _0xC
                +
000094 91e0 0182+LDS R30 , _seg_array + ( 4 )
                 	__GETB1MN _seg_array,4
000096 c037      	RJMP _0x151
                 ;                break;
                 ;        case 3: PORTD=seg_array[3];
                 _0xC:
000097 30e3      	CPI  R30,LOW(0x3)
000098 e0a0      	LDI  R26,HIGH(0x3)
000099 07fa      	CPC  R31,R26
00009a f419      	BRNE _0xD
                +
00009b 91e0 0184+LDS R30 , _seg_array + ( 6 )
                 	__GETB1MN _seg_array,6
00009d c030      	RJMP _0x151
                 ;                break;
                 ;        case 4: PORTD=seg_array[4];
                 _0xD:
00009e 30e4      	CPI  R30,LOW(0x4)
00009f e0a0      	LDI  R26,HIGH(0x4)
0000a0 07fa      	CPC  R31,R26
0000a1 f419      	BRNE _0xE
                +
0000a2 91e0 0186+LDS R30 , _seg_array + ( 8 )
                 	__GETB1MN _seg_array,8
0000a4 c029      	RJMP _0x151
                 ;                break;
                 ;        case 5: PORTD=seg_array[5];
                 _0xE:
0000a5 30e5      	CPI  R30,LOW(0x5)
0000a6 e0a0      	LDI  R26,HIGH(0x5)
0000a7 07fa      	CPC  R31,R26
0000a8 f419      	BRNE _0xF
                +
0000a9 91e0 0188+LDS R30 , _seg_array + ( 10 )
                 	__GETB1MN _seg_array,10
0000ab c022      	RJMP _0x151
                 ;                break;
                 ;        case 6: PORTD=seg_array[6];
                 _0xF:
0000ac 30e6      	CPI  R30,LOW(0x6)
0000ad e0a0      	LDI  R26,HIGH(0x6)
0000ae 07fa      	CPC  R31,R26
0000af f419      	BRNE _0x10
                +
0000b0 91e0 018a+LDS R30 , _seg_array + ( 12 )
                 	__GETB1MN _seg_array,12
0000b2 c01b      	RJMP _0x151
                 ;                break;
                 ;        case 7: PORTD=seg_array[7];
                 _0x10:
0000b3 30e7      	CPI  R30,LOW(0x7)
0000b4 e0a0      	LDI  R26,HIGH(0x7)
0000b5 07fa      	CPC  R31,R26
0000b6 f419      	BRNE _0x11
                +
0000b7 91e0 018c+LDS R30 , _seg_array + ( 14 )
                 	__GETB1MN _seg_array,14
0000b9 c014      	RJMP _0x151
                 ;                break;
                 ;        case 8: PORTD=seg_array[8];
                 _0x11:
0000ba 30e8      	CPI  R30,LOW(0x8)
0000bb e0a0      	LDI  R26,HIGH(0x8)
0000bc 07fa      	CPC  R31,R26
0000bd f419      	BRNE _0x12
                +
0000be 91e0 018e+LDS R30 , _seg_array + ( 16 )
                 	__GETB1MN _seg_array,16
0000c0 c00d      	RJMP _0x151
                 ;                break;
                 ;        case 9: PORTD=seg_array[9];
                 _0x12:
0000c1 30e9      	CPI  R30,LOW(0x9)
0000c2 e0a0      	LDI  R26,HIGH(0x9)
0000c3 07fa      	CPC  R31,R26
0000c4 f419      	BRNE _0x13
                +
0000c5 91e0 0190+LDS R30 , _seg_array + ( 18 )
                 	__GETB1MN _seg_array,18
0000c7 c006      	RJMP _0x151
                 ;                break;
                 ;        case 10: PORTD=seg_array[10];
                 _0x13:
0000c8 30ea      	CPI  R30,LOW(0xA)
0000c9 e0a0      	LDI  R26,HIGH(0xA)
0000ca 07fa      	CPC  R31,R26
0000cb f419      	BRNE _0x9
                +
0000cc 91e0 0192+LDS R30 , _seg_array + ( 20 )
                 	__GETB1MN _seg_array,20
                 _0x151:
0000ce bbe2      	OUT  0x12,R30
                 ;                break;
                 ;        }
                 _0x9:
                 ;	}
0000cf 9621      	ADIW R28,1
0000d0 9508      	RET
                 ;
                 ;void dislay7seg()
                 ;    {
                 _dislay7seg:
                 ;    ledvdv=1;
0000d1 d1e9      	RCALL SUBOPT_0x2
                 ;    ledxdv=1; ledxch=1; ledxtr=1;
                 ;    ledddv = 1; leddch = 1; leddtr = 1;
0000d2 d1ed      	RCALL SUBOPT_0x3
                 ;    seg_display(10);
                 ;
                 ;    switch (d_type)
0000d3 01f2      	MOVW R30,R4
                 ;        {
                 ;        case 1:
0000d4 30e1      	CPI  R30,LOW(0x1)
0000d5 e0a0      	LDI  R26,HIGH(0x1)
0000d6 07fa      	CPC  R31,R26
0000d7 f5b1      	BRNE _0x26
                 ;        {
                 ;        if (d_anod > 9) d_anod=1;
0000d8 d1ed      	RCALL SUBOPT_0x4
0000d9 f40c      	BRGE _0x27
0000da d1f0      	RCALL SUBOPT_0x5
                 ;        if (d_anod <= 2)
                 _0x27:
0000db d1f3      	RCALL SUBOPT_0x6
0000dc f02c      	BRLT _0x28
                 ;            {
                 ;            ledvdv=1; ledxdv=1; ledxch=1; ledxtr=1;
0000dd d1dd      	RCALL SUBOPT_0x2
                 ;            ledddv = 0;
0000de 98ac      	CBI  0x15,4
                 ;            leddch = 1;
0000df d1f4      	RCALL SUBOPT_0x7
                 ;            leddtr = 1;
                 ;            seg_display(donvi);
0000e0 926a      	ST   -Y,R6
0000e1 dfa0      	RCALL _seg_display
                 ;            }
                 ;        if ((d_anod > 2)&&(d_anod <= 3))
                 _0x28:
0000e2 d1ec      	RCALL SUBOPT_0x6
0000e3 f414      	BRGE _0x38
0000e4 d1f2      	RCALL SUBOPT_0x8
0000e5 f40c      	BRGE _0x39
                 _0x38:
0000e6 c002      	RJMP _0x37
                 _0x39:
                 ;            {
                 ;            ledvdv=1; ledxdv=1; ledxch=1; ledxtr=1;
0000e7 d1d3      	RCALL SUBOPT_0x2
                 ;            ledddv = 1;
0000e8 d1d7      	RCALL SUBOPT_0x3
                 ;            leddch = 1;
                 ;            leddtr = 1;
                 ;            seg_display(10);
                 ;            }
                 ;        if ((d_anod > 3)&&(d_anod <= 5))
                 _0x37:
0000e9 d1ed      	RCALL SUBOPT_0x8
0000ea f414      	BRGE _0x49
0000eb d1f0      	RCALL SUBOPT_0x9
0000ec f40c      	BRGE _0x4A
                 _0x49:
0000ed c006      	RJMP _0x48
                 _0x4A:
                 ;            {
                 ;            ledvdv=1; ledxdv=1; ledxch=1; ledxtr=1;
0000ee d1cc      	RCALL SUBOPT_0x2
                 ;            ledddv = 1;
0000ef 9aac      	SBI  0x15,4
                 ;            leddch = 0;
0000f0 98a8      	CBI  0x15,0
                 ;            leddtr = 1;
0000f1 9ac5      	SBI  0x18,5
                 ;            seg_display(chuc);
0000f2 928a      	ST   -Y,R8
0000f3 df8e      	RCALL _seg_display
                 ;            }
                 ;        if ((d_anod > 5)&&(d_anod <= 6))
                 _0x48:
0000f4 d1e7      	RCALL SUBOPT_0x9
0000f5 f414      	BRGE _0x5A
0000f6 d1ea      	RCALL SUBOPT_0xA
0000f7 f40c      	BRGE _0x5B
                 _0x5A:
0000f8 c002      	RJMP _0x59
                 _0x5B:
                 ;            {
                 ;            ledvdv=1; ledxdv=1; ledxch=1; ledxtr=1;
0000f9 d1c1      	RCALL SUBOPT_0x2
                 ;            ledddv = 1;
0000fa d1c5      	RCALL SUBOPT_0x3
                 ;            leddch = 1;
                 ;            leddtr = 1;
                 ;            seg_display(10);
                 ;            }
                 ;        if ((d_anod > 6)&&(d_anod <= 8))
                 _0x59:
0000fb d1e5      	RCALL SUBOPT_0xA
0000fc f414      	BRGE _0x6B
0000fd d1e8      	RCALL SUBOPT_0xB
0000fe f40c      	BRGE _0x6C
                 _0x6B:
0000ff c006      	RJMP _0x6A
                 _0x6C:
                 ;            {
                 ;            ledvdv=1; ledxdv=1; ledxch=1; ledxtr=1;
000100 d1ba      	RCALL SUBOPT_0x2
                 ;            ledddv = 1;
000101 9aac      	SBI  0x15,4
                 ;            leddch = 1;
000102 9aa8      	SBI  0x15,0
                 ;            leddtr = 0;
000103 98c5      	CBI  0x18,5
                 ;            seg_display(tram);
000104 92aa      	ST   -Y,R10
000105 df7c      	RCALL _seg_display
                 ;            }
                 ;        if ((d_anod > 8)&&(d_anod <= 9))
                 _0x6A:
000106 d1df      	RCALL SUBOPT_0xB
000107 f414      	BRGE _0x7C
000108 d1bd      	RCALL SUBOPT_0x4
000109 f40c      	BRGE _0x7D
                 _0x7C:
00010a c002      	RJMP _0x7B
                 _0x7D:
                 ;            {
                 ;            ledvdv=1; ledxdv=1; ledxch=1; ledxtr=1;
00010b d1af      	RCALL SUBOPT_0x2
                 ;            ledddv = 1;
00010c d1b3      	RCALL SUBOPT_0x3
                 ;            leddch = 1;
                 ;            leddtr = 1;
                 ;            seg_display(10);
                 ;            }
                 ;        break;
                 _0x7B:
00010d c056      	RJMP _0x25
                 ;        }
                 ;        case 2:
                 _0x26:
00010e 30e2      	CPI  R30,LOW(0x2)
00010f e0a0      	LDI  R26,HIGH(0x2)
000110 07fa      	CPC  R31,R26
000111 f5c9      	BRNE _0x8C
                 ;        {
                 ;        if (d_anod > 9) d_anod=1;
000112 d1b3      	RCALL SUBOPT_0x4
000113 f40c      	BRGE _0x8D
000114 d1b6      	RCALL SUBOPT_0x5
                 ;        if (d_anod <= 2)
                 _0x8D:
000115 d1b9      	RCALL SUBOPT_0x6
000116 f02c      	BRLT _0x8E
                 ;            {
                 ;            ledvdv=1; ledddv = 1; leddch = 1; leddtr = 1;
000117 d1d3      	RCALL SUBOPT_0xC
                 ;            ledxdv=0;
000118 98ab      	CBI  0x15,3
                 ;            ledxch=1;
000119 d1d4      	RCALL SUBOPT_0xD
                 ;            ledxtr=1;
                 ;            seg_display(donvi);
00011a 926a      	ST   -Y,R6
00011b df66      	RCALL _seg_display
                 ;            }
                 ;        if ((d_anod > 2)&&(d_anod <= 3))
                 _0x8E:
00011c d1b2      	RCALL SUBOPT_0x6
00011d f414      	BRGE _0x9E
00011e d1b8      	RCALL SUBOPT_0x8
00011f f40c      	BRGE _0x9F
                 _0x9E:
000120 c003      	RJMP _0x9D
                 _0x9F:
                 ;            {
                 ;            ledvdv=1; ledddv = 1; leddch = 1; leddtr = 1;
000121 d1c9      	RCALL SUBOPT_0xC
                 ;            ledxdv=1;
000122 d1ce      	RCALL SUBOPT_0xE
                 ;            ledxch=1;
                 ;            ledxtr=1;
                 ;            seg_display(10);
000123 d1cf      	RCALL SUBOPT_0xF
                 ;            }
                 ;        if ((d_anod > 3)&&(d_anod <= 5))
                 _0x9D:
000124 d1b2      	RCALL SUBOPT_0x8
000125 f414      	BRGE _0xAF
000126 d1b5      	RCALL SUBOPT_0x9
000127 f40c      	BRGE _0xB0
                 _0xAF:
000128 c006      	RJMP _0xAE
                 _0xB0:
                 ;            {
                 ;            ledvdv=1; ledddv = 1; leddch = 1; leddtr = 1;
000129 d1c1      	RCALL SUBOPT_0xC
                 ;            ledxdv=1;
00012a 9aab      	SBI  0x15,3
                 ;            ledxch=0;
00012b 98a9      	CBI  0x15,1
                 ;            ledxtr=1;
00012c 9aad      	SBI  0x15,5
                 ;            seg_display(chuc);
00012d 928a      	ST   -Y,R8
00012e df53      	RCALL _seg_display
                 ;            }
                 ;        if ((d_anod > 5)&&(d_anod <= 6))
                 _0xAE:
00012f d1ac      	RCALL SUBOPT_0x9
000130 f414      	BRGE _0xC0
000131 d1af      	RCALL SUBOPT_0xA
000132 f40c      	BRGE _0xC1
                 _0xC0:
000133 c003      	RJMP _0xBF
                 _0xC1:
                 ;            {
                 ;            ledvdv=1; ledddv = 1; leddch = 1; leddtr = 1;
000134 d1b6      	RCALL SUBOPT_0xC
                 ;            ledxdv=1;
000135 d1bb      	RCALL SUBOPT_0xE
                 ;            ledxch=1;
                 ;            ledxtr=1;
                 ;            seg_display(10);
000136 d1bc      	RCALL SUBOPT_0xF
                 ;            }
                 ;        if ((d_anod > 6)&&(d_anod <= 8))
                 _0xBF:
000137 d1a9      	RCALL SUBOPT_0xA
000138 f414      	BRGE _0xD1
000139 d1ac      	RCALL SUBOPT_0xB
00013a f40c      	BRGE _0xD2
                 _0xD1:
00013b c006      	RJMP _0xD0
                 _0xD2:
                 ;            {
                 ;            ledvdv=1; ledddv = 1; leddch = 1; leddtr = 1;
00013c d1ae      	RCALL SUBOPT_0xC
                 ;            ledxdv=1;
00013d 9aab      	SBI  0x15,3
                 ;            ledxch=1;
00013e 9aa9      	SBI  0x15,1
                 ;            ledxtr=0;
00013f 98ad      	CBI  0x15,5
                 ;            seg_display(tram);
000140 92aa      	ST   -Y,R10
000141 df40      	RCALL _seg_display
                 ;            }
                 ;        if ((d_anod > 8)&&(d_anod <= 9))
                 _0xD0:
000142 d1a3      	RCALL SUBOPT_0xB
000143 f414      	BRGE _0xE2
000144 d181      	RCALL SUBOPT_0x4
000145 f40c      	BRGE _0xE3
                 _0xE2:
000146 c003      	RJMP _0xE1
                 _0xE3:
                 ;            {
                 ;            ledvdv=1; ledddv = 1; leddch = 1; leddtr = 1;
000147 d1a3      	RCALL SUBOPT_0xC
                 ;            ledxdv=1;
000148 d1a8      	RCALL SUBOPT_0xE
                 ;            ledxch=1;
                 ;            ledxtr=1;
                 ;            seg_display(10);
000149 d1a9      	RCALL SUBOPT_0xF
                 ;            }
                 ;        break;
                 _0xE1:
00014a c019      	RJMP _0x25
                 ;        }
                 ;        case 3:
                 _0x8C:
00014b 30e3      	CPI  R30,LOW(0x3)
00014c e0a0      	LDI  R26,HIGH(0x3)
00014d 07fa      	CPC  R31,R26
00014e f4a9      	BRNE _0x25
                 ;        {
                 ;        if (d_anod > 9) d_anod=1;
00014f d176      	RCALL SUBOPT_0x4
000150 f40c      	BRGE _0xF3
000151 d179      	RCALL SUBOPT_0x5
                 ;        if (d_anod <= 2)
                 _0xF3:
000152 d17c      	RCALL SUBOPT_0x6
000153 f034      	BRLT _0xF4
                 ;            {
                 ;            ledddv = 1; leddch = 1; leddtr = 1; ledxdv=1; ledxch=1; ledxtr=1;
000154 9aac      	SBI  0x15,4
000155 d17e      	RCALL SUBOPT_0x7
000156 d19a      	RCALL SUBOPT_0xE
                 ;            ledvdv=0;
000157 98aa      	CBI  0x15,2
                 ;            seg_display(donvi);
000158 926a      	ST   -Y,R6
000159 df28      	RCALL _seg_display
                 ;            }
                 ;        if ((d_anod > 2)&&(d_anod <= 9))
                 _0xF4:
00015a d174      	RCALL SUBOPT_0x6
00015b f414      	BRGE _0x104
00015c d169      	RCALL SUBOPT_0x4
00015d f40c      	BRGE _0x105
                 _0x104:
00015e c005      	RJMP _0x103
                 _0x105:
                 ;            {
                 ;            ledddv = 1; leddch = 1; leddtr = 1; ledxdv=1; ledxch=1; ledxtr=1;
00015f 9aac      	SBI  0x15,4
000160 d173      	RCALL SUBOPT_0x7
000161 d18f      	RCALL SUBOPT_0xE
                 ;            ledvdv=1;
000162 9aaa      	SBI  0x15,2
                 ;            seg_display(10);
000163 d18f      	RCALL SUBOPT_0xF
                 ;            }
                 ;        break;
                 _0x103:
                 ;        }
                 ;        }
                 _0x25:
                 ;    }
000164 9508      	RET
                 ;#include <calculate.c>
                 ;
                 ;
                 ;void calculate()
                 ; 0000 0021     {
                 _calculate:
                 ;          if (d_type ==1)
000165 d190      	RCALL SUBOPT_0x10
000166 f529      	BRNE _0x114
                 ;            {
                 ;            cou_1s=0;
000167 d193      	RCALL SUBOPT_0x11
                 ;            cou_r_pre--;
                 ;            donvi = cou_r_pre&0xf;
                 ;            chuc  = (cou_r_pre/10)&0xf;
                 ;            tram  = (cou_r_pre/100)&0xf;
                 ;            if (chuc == 0) chuc=10;
000168 f411      	BRNE _0x115
000169 d1bb      	RCALL SUBOPT_0x12
00016a 014f      	MOVW R8,R30
                 ;            if (tram == 0) tram=10;
                 _0x115:
00016b d1bc      	RCALL SUBOPT_0x13
00016c f409      	BRNE _0x116
00016d d1bd      	RCALL SUBOPT_0x14
                 ;            while(d_type ==1)
                 _0x116:
                 _0x117:
00016e d187      	RCALL SUBOPT_0x10
00016f f4e1      	BRNE _0x119
                 ;                {
                 ;                if (cou_1s >=40)
000170 d1bd      	RCALL SUBOPT_0x15
000171 f0cc      	BRLT _0x11A
                 ;                    {
                 ;                    if ((li_r ==1)&&(li_g ==1)) d_type=3;
000172 9bb1      	SBIS 0x16,1
000173 c002      	RJMP _0x11C
000174 99b2      	SBIC 0x16,2
000175 c001      	RJMP _0x11D
                 _0x11C:
000176 c002      	RJMP _0x11B
                 _0x11D:
000177 d1bc      	RCALL SUBOPT_0x16
000178 012f      	MOVW R4,R30
                 ;                    cou_1s =0;
                 _0x11B:
000179 d181      	RCALL SUBOPT_0x11
                 ;                    cou_r_pre--;
                 ;                    donvi = cou_r_pre&0xf;
                 ;                    chuc  = (cou_r_pre/10)&0xf;
                 ;                    tram  = (cou_r_pre/100)&0xf;
                 ;                    if (chuc == 0) chuc=10;
00017a f409      	BRNE _0x11E
00017b d1bb      	RCALL SUBOPT_0x17
                 ;                    if (tram == 0) chuc=10;
                 _0x11E:
00017c d1ab      	RCALL SUBOPT_0x13
00017d f409      	BRNE _0x11F
00017e d1b8      	RCALL SUBOPT_0x17
                 ;                    if (cou_r_pre <=-1)
                 _0x11F:
00017f 91a0 0172 	LDS  R26,_cou_r_pre
000181 91b0 0173 	LDS  R27,_cou_r_pre+1
000183 d1b6      	RCALL SUBOPT_0x18
000184 17ea      	CP   R30,R26
000185 07fb      	CPC  R31,R27
000186 f024      	BRLT _0x120
                 ;                        {
                 ;                        cou_r_pre =-1;
000187 d1b2      	RCALL SUBOPT_0x18
000188 d1b4      	RCALL SUBOPT_0x19
                 ;                        donvi=10;
000189 d1b8      	RCALL SUBOPT_0x1A
                 ;                        chuc=10;
                 ;                        tram=10;
00018a d1a0      	RCALL SUBOPT_0x14
                 ;                        }
                 ;                    }
                 _0x120:
                 ;                }
                 _0x11A:
00018b cfe2      	RJMP _0x117
                 _0x119:
                 ;            }
                 ; /////////////////////////////////////////////////////////////////////
                 ;        if (d_type ==2)
                 _0x114:
00018c d1b8      	RCALL SUBOPT_0x1B
00018d f4e9      	BRNE _0x121
                 ;            {
                 ;            cou_1s=0;
00018e d1bb      	RCALL SUBOPT_0x1C
                 ;            cou_g_pre--;
                 ;            donvi = cou_g_pre&0xf;
                 ;            chuc  = (cou_g_pre/10)&0xf;
                 ;            tram  = (cou_g_pre/100)&0xf;
                 ;            if (chuc == 0) chuc=10;
00018f f409      	BRNE _0x122
000190 d1a6      	RCALL SUBOPT_0x17
                 ;            if (tram == 0) tram=10;
                 _0x122:
000191 d196      	RCALL SUBOPT_0x13
000192 f409      	BRNE _0x123
000193 d197      	RCALL SUBOPT_0x14
                 ;            while(d_type ==2)
                 _0x123:
                 _0x124:
000194 d1b0      	RCALL SUBOPT_0x1B
000195 f4a9      	BRNE _0x126
                 ;                {
                 ;                if (cou_1s >=40)
000196 d197      	RCALL SUBOPT_0x15
000197 f094      	BRLT _0x127
                 ;                    {
                 ;                    cou_1s =0;
000198 d1b1      	RCALL SUBOPT_0x1C
                 ;                    cou_g_pre--;
                 ;                    donvi = cou_g_pre&0xf;
                 ;                    chuc  = (cou_g_pre/10)&0xf;
                 ;                    tram  = (cou_g_pre/100)&0xf;
                 ;                    if (chuc == 0) chuc=10;
000199 f409      	BRNE _0x128
00019a d19c      	RCALL SUBOPT_0x17
                 ;                    if (tram == 0) tram=10;
                 _0x128:
00019b d18c      	RCALL SUBOPT_0x13
00019c f409      	BRNE _0x129
00019d d18d      	RCALL SUBOPT_0x14
                 ;                    if (cou_g_pre <=-1)
                 _0x129:
00019e 91a0 0174 	LDS  R26,_cou_g_pre
0001a0 91b0 0175 	LDS  R27,_cou_g_pre+1
0001a2 d197      	RCALL SUBOPT_0x18
0001a3 17ea      	CP   R30,R26
0001a4 07fb      	CPC  R31,R27
0001a5 f024      	BRLT _0x12A
                 ;                        {
                 ;                        cou_g_pre =-1;
0001a6 d193      	RCALL SUBOPT_0x18
0001a7 d1cb      	RCALL SUBOPT_0x1D
                 ;                        donvi=10;
0001a8 d199      	RCALL SUBOPT_0x1A
                 ;                        chuc=10;
                 ;                        tram=10;
0001a9 d181      	RCALL SUBOPT_0x14
                 ;                        }
                 ;                    }
                 _0x12A:
                 ;                }
                 _0x127:
0001aa cfe9      	RJMP _0x124
                 _0x126:
                 ;            }
                 ; /////////////////////////////////////////////////////////////////////
                 ;        if (d_type ==3)
                 _0x121:
0001ab d1cc      	RCALL SUBOPT_0x1E
0001ac f009      	BREQ PC+2
0001ad c048      	RJMP _0x12B
                 ;            {
                 ;            cou_1s=0;
0001ae d1cd      	RCALL SUBOPT_0x1F
                 ;            cou_y_pre--;
0001af d1d2      	RCALL SUBOPT_0x20
                 ;            donvi = cou_y_pre&0xf;
                 ;            chuc=10;
                 ;            tram=10;
0001b0 d17a      	RCALL SUBOPT_0x14
                 ;            while(d_type ==3)
                 _0x12C:
0001b1 d1c6      	RCALL SUBOPT_0x1E
0001b2 f009      	BREQ PC+2
0001b3 c042      	RJMP _0x12E
                 ;                {
                 ;                if (cou_y >440)
0001b4 91a0 016c 	LDS  R26,_cou_y
0001b6 91b0 016d 	LDS  R27,_cou_y+1
0001b8 3ba9      	CPI  R26,LOW(0x1B9)
0001b9 e0e1      	LDI  R30,HIGH(0x1B9)
0001ba 07be      	CPC  R27,R30
0001bb f124      	BRLT _0x12F
                 ;                    {
                 ;                    reset_interupt01();
0001bc deb9      	RCALL _reset_interupt01
                 ;                    cou_r =0; cou_g =0; cou_y =0;
0001bd e0e0      	LDI  R30,LOW(0)
0001be 93e0 0168 	STS  _cou_r,R30
0001c0 93e0 0169 	STS  _cou_r+1,R30
0001c2 93e0 016a 	STS  _cou_g,R30
0001c4 93e0 016b 	STS  _cou_g+1,R30
0001c6 93e0 016c 	STS  _cou_y,R30
0001c8 93e0 016d 	STS  _cou_y+1,R30
                 ;                    cou_dr =0;
0001ca 93e0 0160 	STS  _cou_dr,R30
0001cc 93e0 0161 	STS  _cou_dr+1,R30
                 ;                    cou_dg =0;
0001ce 93e0 0162 	STS  _cou_dg,R30
0001d0 93e0 0163 	STS  _cou_dg+1,R30
                 ;                    cou_dy =0;
0001d2 93e0 0164 	STS  _cou_dy,R30
0001d4 93e0 0165 	STS  _cou_dy+1,R30
                 ;                    cou_1s=0;
0001d6 d1a5      	RCALL SUBOPT_0x1F
                 ;                    d_type =0;
0001d7 2444      	CLR  R4
0001d8 2455      	CLR  R5
                 ;                    kds_cv =3;
0001d9 d15a      	RCALL SUBOPT_0x16
0001da 93e0 017c 	STS  _kds_cv,R30
0001dc 93f0 017d 	STS  _kds_cv+1,R31
                 ;                    f_cv =1;
0001de 9468      	SET
0001df f820      	BLD  R2,0
                 ;                    }
                 ;                if (cou_1s >=39)
                 _0x12F:
0001e0 91a0 016e 	LDS  R26,_cou_1s
0001e2 91b0 016f 	LDS  R27,_cou_1s+1
0001e4 9797      	SBIW R26,39
0001e5 f07c      	BRLT _0x130
                 ;                    {
                 ;                    cou_1s =0;
0001e6 d195      	RCALL SUBOPT_0x1F
                 ;                    cou_y_pre--;
0001e7 d19a      	RCALL SUBOPT_0x20
                 ;                    donvi = cou_y_pre&0xf;
                 ;                    chuc=10;
                 ;                    tram=10;
0001e8 d142      	RCALL SUBOPT_0x14
                 ;                    if (cou_y_pre <=-1)
0001e9 91a0 0176 	LDS  R26,_cou_y_pre
0001eb 91b0 0177 	LDS  R27,_cou_y_pre+1
0001ed d14c      	RCALL SUBOPT_0x18
0001ee 17ea      	CP   R30,R26
0001ef 07fb      	CPC  R31,R27
0001f0 f024      	BRLT _0x131
                 ;                        {
                 ;                        cou_y_pre =-1;
0001f1 d148      	RCALL SUBOPT_0x18
0001f2 d19e      	RCALL SUBOPT_0x21
                 ;                        donvi=10;
0001f3 d14e      	RCALL SUBOPT_0x1A
                 ;                        chuc=10;
                 ;                        tram=10;
0001f4 d136      	RCALL SUBOPT_0x14
                 ;                        }
                 ;                    }
                 _0x131:
                 ;                }
                 _0x130:
0001f5 cfbb      	RJMP _0x12C
                 _0x12E:
                 ;            }
                 ;    }
                 _0x12B:
0001f6 9508      	RET
                 ;
                 ;
                 ;// Timer 0 overflow interrupt service routine: overflow at 1ms
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0026 {
                 _timer0_ovf_isr:
0001f7 920a      	ST   -Y,R0
0001f8 921a      	ST   -Y,R1
0001f9 92fa      	ST   -Y,R15
0001fa 936a      	ST   -Y,R22
0001fb 937a      	ST   -Y,R23
0001fc 938a      	ST   -Y,R24
0001fd 939a      	ST   -Y,R25
0001fe 93aa      	ST   -Y,R26
0001ff 93ba      	ST   -Y,R27
000200 93ea      	ST   -Y,R30
000201 93fa      	ST   -Y,R31
000202 b7ef      	IN   R30,SREG
000203 93ea      	ST   -Y,R30
                 ; 0000 0027 // Reinitialize Timer 0 value
                 ; 0000 0028 TCNT0=0x82;
000204 e8e2      	LDI  R30,LOW(130)
000205 bfe2      	OUT  0x32,R30
                 ; 0000 0029 // Place your code here
                 ; 0000 002A dislay7seg();
000206 deca      	RCALL _dislay7seg
                 ; 0000 002B 
                 ; 0000 002C }
000207 91e9      	LD   R30,Y+
000208 bfef      	OUT  SREG,R30
000209 91f9      	LD   R31,Y+
00020a 91e9      	LD   R30,Y+
00020b 91b9      	LD   R27,Y+
00020c 91a9      	LD   R26,Y+
00020d 9199      	LD   R25,Y+
00020e 9189      	LD   R24,Y+
00020f 9179      	LD   R23,Y+
000210 9169      	LD   R22,Y+
000211 90f9      	LD   R15,Y+
000212 9019      	LD   R1,Y+
000213 9009      	LD   R0,Y+
000214 9518      	RETI
                 ;
                 ;// Timer1 overflow interrupt service routine: overflow at 25ms
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0030 {
                 _timer1_ovf_isr:
000215 93aa      	ST   -Y,R26
000216 93ba      	ST   -Y,R27
000217 93ea      	ST   -Y,R30
000218 93fa      	ST   -Y,R31
000219 b7ef      	IN   R30,SREG
00021a 93ea      	ST   -Y,R30
                 ; 0000 0031 // Reinitialize Timer1 value
                 ; 0000 0032 TCNT1H=0x9E57 >> 8;
00021b d092      	RCALL SUBOPT_0x0
                 ; 0000 0033 TCNT1L=0x9E57 & 0xff;
                 ; 0000 0034 // Place your code here
                 ; 0000 0035 /*
                 ; 0000 0036 switch (d_type)
                 ; 0000 0037 			{
                 ; 0000 0038 			case 1: cou_r++;
                 ; 0000 0039 					if ((li_r ==1)&&(li_g ==0))
                 ; 0000 003A 						{
                 ; 0000 003B 						cou_dr++; d_type=2;
                 ; 0000 003C 						if (kds_cv <=0) cou_r_pre =cou_r/40;
                 ; 0000 003D 						cou_r =0;
                 ; 0000 003E 						}
                 ; 0000 003F 					if (cou_dr >=5)
                 ; 0000 0040 						{cou_dr =0; f_red =cou_r_pre; }
                 ; 0000 0041 					break;
                 ; 0000 0042 			case 2: cou_g++;
                 ; 0000 0043 					if ((li_r ==1)&&(li_g ==1))
                 ; 0000 0044 						{
                 ; 0000 0045 						cou_dg++; d_type=3;
                 ; 0000 0046 						if (kds_cv <=0) cou_g_pre =cou_g/40;
                 ; 0000 0047 						cou_g =0;
                 ; 0000 0048 						}
                 ; 0000 0049 					if (cou_dg >=5)
                 ; 0000 004A 						{cou_dg =0; f_gree =cou_g_pre; }
                 ; 0000 004B 					break;
                 ; 0000 004C 			case 3: cou_y++;
                 ; 0000 004D 					if ((li_r ==0)&&(li_g ==1))
                 ; 0000 004E 						{
                 ; 0000 004F 						cou_dy++; d_type=1;
                 ; 0000 0050 						if (kds_cv <=0) cou_y_pre =cou_y/40;
                 ; 0000 0051 						cou_y =0;
                 ; 0000 0052 						}
                 ; 0000 0053 					if (cou_dy >=5)
                 ; 0000 0054 						{cou_dy =0; f_yell =cou_y_pre; }
                 ; 0000 0055 					break;
                 ; 0000 0056 			}
                 ; 0000 0057 */
                 ; 0000 0058 
                 ; 0000 0059 		cou_1s++;
00021c e6ae      	LDI  R26,LOW(_cou_1s)
00021d e0b1      	LDI  R27,HIGH(_cou_1s)
00021e d177      	RCALL SUBOPT_0x22
                 ; 0000 005A 
                 ; 0000 005B }
00021f 91e9      	LD   R30,Y+
000220 bfef      	OUT  SREG,R30
000221 91f9      	LD   R31,Y+
000222 91e9      	LD   R30,Y+
000223 91b9      	LD   R27,Y+
000224 91a9      	LD   R26,Y+
000225 9518      	RETI
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0060 {
                 _main:
                 ; 0000 0061 
                 ; 0000 0062 // Input/Output Ports initialization
                 ; 0000 0063 // Port B initialization
                 ; 0000 0064 // Func7=In Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0065 // State7=T State6=T State5=1 State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0066 PORTB=0x20;
000226 e2e0      	LDI  R30,LOW(32)
000227 bbe8      	OUT  0x18,R30
                 ; 0000 0067 DDRB=0x20;
000228 bbe7      	OUT  0x17,R30
                 ; 0000 0068 
                 ; 0000 0069 // Port C initialization
                 ; 0000 006A // Func6=In Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 006B // State6=T State5=1 State4=1 State3=1 State2=1 State1=1 State0=1
                 ; 0000 006C PORTC=0x3F;
000229 e3ef      	LDI  R30,LOW(63)
00022a bbe5      	OUT  0x15,R30
                 ; 0000 006D DDRC=0x3F;
00022b bbe4      	OUT  0x14,R30
                 ; 0000 006E 
                 ; 0000 006F // Port D initialization
                 ; 0000 0070 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 0071 // State7=1 State6=1 State5=1 State4=1 State3=1 State2=1 State1=1 State0=1
                 ; 0000 0072 PORTD=0x00;
00022c e0e0      	LDI  R30,LOW(0)
00022d bbe2      	OUT  0x12,R30
                 ; 0000 0073 DDRD=0xFF;
00022e efef      	LDI  R30,LOW(255)
00022f bbe1      	OUT  0x11,R30
                 ; 0000 0074 
                 ; 0000 0075 if (li_r ==0) d_type=1; else if (li_g ==0) d_type=2; else d_type=3;
000230 99b1      	SBIC 0x16,1
000231 c003      	RJMP _0x132
000232 e0e1      	LDI  R30,LOW(1)
000233 e0f0      	LDI  R31,HIGH(1)
000234 c006      	RJMP _0x152
                 _0x132:
000235 99b2      	SBIC 0x16,2
000236 c003      	RJMP _0x134
000237 e0e2      	LDI  R30,LOW(2)
000238 e0f0      	LDI  R31,HIGH(2)
000239 c001      	RJMP _0x152
                 _0x134:
00023a d0f9      	RCALL SUBOPT_0x16
                 _0x152:
00023b 012f      	MOVW R4,R30
                 ; 0000 0076 
                 ; 0000 0077 set_interupt01();
00023c de2b      	RCALL _set_interupt01
                 ; 0000 0078 
                 ; 0000 0079 while (1)
                 ; 0000 007A       {
                 ; 0000 007B       // Place your code here
                 ; 0000 007C       if(kds_cv <=0) { kds_cv =0; calculate();}
00023d d15e      	RCALL SUBOPT_0x23
00023e f00c      	BRLT _0x139
00023f d162      	RCALL SUBOPT_0x24
                 ; 0000 007D 
                 ; 0000 007E       while(1)
                 _0x139:
                 _0x13A:
                 ; 0000 007F 		{
                 ; 0000 0080 		if(kds_cv <=0) { kds_cv =0; calculate();}
000240 d15b      	RCALL SUBOPT_0x23
000241 f00c      	BRLT _0x13D
000242 d15f      	RCALL SUBOPT_0x24
                 ; 0000 0081 
                 ; 0000 0082 		if(kds_cv >1)
                 _0x13D:
000243 91a0 017c 	LDS  R26,_kds_cv
000245 91b0 017d 	LDS  R27,_kds_cv+1
000247 9712      	SBIW R26,2
000248 f40c      	BRGE PC+2
000249 c062      	RJMP _0x13E
                 ; 0000 0083 		{
                 ; 0000 0084 		while(f_cv ==1)
                 _0x13F:
00024a fe20      	SBRS R2,0
00024b c01b      	RJMP _0x141
                 ; 0000 0085 			{
                 ; 0000 0086 			if ((li_r ==0)|(li_g ==0))
00024c e0a0      	LDI  R26,0
00024d 99b1      	SBIC 0x16,1
00024e e0a1      	LDI  R26,1
00024f d158      	RCALL SUBOPT_0x25
000250 2e0e      	MOV  R0,R30
000251 e0a0      	LDI  R26,0
000252 99b2      	SBIC 0x16,2
000253 e0a1      	LDI  R26,1
000254 d153      	RCALL SUBOPT_0x25
000255 29e0      	OR   R30,R0
000256 f079      	BREQ _0x142
                 ; 0000 0087 				{
                 ; 0000 0088 				set_interupt01();
000257 de10      	RCALL _set_interupt01
                 ; 0000 0089 				f_cv=0;
000258 94e8      	CLT
000259 f820      	BLD  R2,0
                 ; 0000 008A 				if (li_r ==0) d_type=1; else if (li_g ==0) d_type=2; else d_type=3;
00025a 99b1      	SBIC 0x16,1
00025b c003      	RJMP _0x143
00025c e0e1      	LDI  R30,LOW(1)
00025d e0f0      	LDI  R31,HIGH(1)
00025e c006      	RJMP _0x153
                 _0x143:
00025f 99b2      	SBIC 0x16,2
000260 c003      	RJMP _0x145
000261 e0e2      	LDI  R30,LOW(2)
000262 e0f0      	LDI  R31,HIGH(2)
000263 c001      	RJMP _0x153
                 _0x145:
000264 d0cf      	RCALL SUBOPT_0x16
                 _0x153:
000265 012f      	MOVW R4,R30
                 ; 0000 008B 				}
                 ; 0000 008C 			}
                 _0x142:
000266 cfe3      	RJMP _0x13F
                 _0x141:
                 ; 0000 008D 		for(i=0; i <2; i++)
000267 e0e0      	LDI  R30,LOW(0)
000268 93e0 0166 	STS  _i,R30
00026a 93e0 0167 	STS  _i+1,R30
                 _0x148:
00026c 91a0 0166 	LDS  R26,_i
00026e 91b0 0167 	LDS  R27,_i+1
000270 9712      	SBIW R26,2
000271 f5ac      	BRGE _0x149
                 ; 0000 008E 		{
                 ; 0000 008F 		gree =0; yell =0; red =0;
000272 94e8      	CLT
000273 f821      	BLD  R2,1
000274 f822      	BLD  R2,2
000275 f823      	BLD  R2,3
                 ; 0000 0090 		cou_r_pre =f_red;
000276 91e0 0178 	LDS  R30,_f_red
000278 91f0 0179 	LDS  R31,_f_red+1
00027a d0c2      	RCALL SUBOPT_0x19
                 ; 0000 0091 		cou_g_pre =f_gree;
00027b 91e0 017a 	LDS  R30,_f_gree
00027d 91f0 017b 	LDS  R31,_f_gree+1
00027f d0f3      	RCALL SUBOPT_0x1D
                 ; 0000 0092 		cou_y_pre =f_yell;
000280 91e0 0170 	LDS  R30,_f_yell
000282 91f0 0171 	LDS  R31,_f_yell+1
000284 d10c      	RCALL SUBOPT_0x21
                 ; 0000 0093 		while ((gree ==0)&(yell ==0)&(red ==0))
                 _0x14A:
000285 e0a0      	LDI  R26,0
000286 fc21      	SBRC R2,1
000287 e0a1      	LDI  R26,1
000288 d11f      	RCALL SUBOPT_0x25
000289 2e0e      	MOV  R0,R30
00028a e0a0      	LDI  R26,0
00028b fc22      	SBRC R2,2
00028c e0a1      	LDI  R26,1
00028d d11a      	RCALL SUBOPT_0x25
00028e 220e      	AND  R0,R30
00028f e0a0      	LDI  R26,0
000290 fc23      	SBRC R2,3
000291 e0a1      	LDI  R26,1
000292 d115      	RCALL SUBOPT_0x25
000293 21e0      	AND  R30,R0
000294 f071      	BREQ _0x14C
                 ; 0000 0094 			{
                 ; 0000 0095 			if (d_type ==1) red =1;
000295 d060      	RCALL SUBOPT_0x10
000296 f411      	BRNE _0x14D
000297 9468      	SET
000298 f823      	BLD  R2,3
                 ; 0000 0096 			if (d_type ==2)	gree =1;
                 _0x14D:
000299 d0ab      	RCALL SUBOPT_0x1B
00029a f411      	BRNE _0x14E
00029b 9468      	SET
00029c f821      	BLD  R2,1
                 ; 0000 0097 			if (d_type ==3) yell =1;
                 _0x14E:
00029d d0da      	RCALL SUBOPT_0x1E
00029e f411      	BRNE _0x14F
00029f 9468      	SET
0002a0 f822      	BLD  R2,2
                 ; 0000 0098 			calculate();
                 _0x14F:
0002a1 dec3      	RCALL _calculate
                 ; 0000 0099 			}
0002a2 cfe2      	RJMP _0x14A
                 _0x14C:
                 ; 0000 009A 		}
0002a3 e6a6      	LDI  R26,LOW(_i)
0002a4 e0b1      	LDI  R27,HIGH(_i)
0002a5 d0f0      	RCALL SUBOPT_0x22
0002a6 cfc5      	RJMP _0x148
                 _0x149:
                 ; 0000 009B 		kds_cv =0;
0002a7 e0e0      	LDI  R30,LOW(0)
0002a8 93e0 017c 	STS  _kds_cv,R30
0002aa 93e0 017d 	STS  _kds_cv+1,R30
                 ; 0000 009C 		}
                 ; 0000 009D 
                 ; 0000 009E       }
                 _0x13E:
0002ac cf93      	RJMP _0x13A
                 ; 0000 009F     }
                 ; 0000 00A0 
                 ; 0000 00A1 }
                 _0x150:
0002ad cfff      	RJMP _0x150
                 
                 	.DSEG
                 _cou_dr:
000160           	.BYTE 0x2
                 _cou_dg:
000162           	.BYTE 0x2
                 _cou_dy:
000164           	.BYTE 0x2
                 _i:
000166           	.BYTE 0x2
                 _cou_r:
000168           	.BYTE 0x2
                 _cou_g:
00016a           	.BYTE 0x2
                 _cou_y:
00016c           	.BYTE 0x2
                 _cou_1s:
00016e           	.BYTE 0x2
                 _f_yell:
000170           	.BYTE 0x2
                 _cou_r_pre:
000172           	.BYTE 0x2
                 _cou_g_pre:
000174           	.BYTE 0x2
                 _cou_y_pre:
000176           	.BYTE 0x2
                 _f_red:
000178           	.BYTE 0x2
                 _f_gree:
00017a           	.BYTE 0x2
                 _kds_cv:
00017c           	.BYTE 0x2
                 _seg_array:
00017e           	.BYTE 0x16
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0002ae e9ee      	LDI  R30,LOW(158)
0002af bded      	OUT  0x2D,R30
0002b0 e5e7      	LDI  R30,LOW(87)
0002b1 bdec      	OUT  0x2C,R30
0002b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
0002b3 e0e0      	LDI  R30,LOW(0)
0002b4 bde7      	OUT  0x27,R30
0002b5 bde6      	OUT  0x26,R30
0002b6 bdeb      	OUT  0x2B,R30
0002b7 bdea      	OUT  0x2A,R30
0002b8 bde9      	OUT  0x29,R30
0002b9 bde8      	OUT  0x28,R30
0002ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x2:
0002bb 9aaa      	SBI  0x15,2
0002bc 9aab      	SBI  0x15,3
0002bd 9aa9      	SBI  0x15,1
0002be 9aad      	SBI  0x15,5
0002bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
0002c0 9aac      	SBI  0x15,4
0002c1 9aa8      	SBI  0x15,0
0002c2 9ac5      	SBI  0x18,5
0002c3 e0ea      	LDI  R30,LOW(10)
0002c4 93ea      	ST   -Y,R30
0002c5 cdbc      	RJMP _seg_display
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
0002c6 e0e9      	LDI  R30,LOW(9)
0002c7 e0f0      	LDI  R31,HIGH(9)
0002c8 15ec      	CP   R30,R12
0002c9 05fd      	CPC  R31,R13
0002ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0002cb e0e1      	LDI  R30,LOW(1)
0002cc e0f0      	LDI  R31,HIGH(1)
0002cd 016f      	MOVW R12,R30
0002ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
0002cf e0e2      	LDI  R30,LOW(2)
0002d0 e0f0      	LDI  R31,HIGH(2)
0002d1 15ec      	CP   R30,R12
0002d2 05fd      	CPC  R31,R13
0002d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
0002d4 9aa8      	SBI  0x15,0
0002d5 9ac5      	SBI  0x18,5
0002d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
0002d7 e0e3      	LDI  R30,LOW(3)
0002d8 e0f0      	LDI  R31,HIGH(3)
0002d9 15ec      	CP   R30,R12
0002da 05fd      	CPC  R31,R13
0002db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
0002dc e0e5      	LDI  R30,LOW(5)
0002dd e0f0      	LDI  R31,HIGH(5)
0002de 15ec      	CP   R30,R12
0002df 05fd      	CPC  R31,R13
0002e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
0002e1 e0e6      	LDI  R30,LOW(6)
0002e2 e0f0      	LDI  R31,HIGH(6)
0002e3 15ec      	CP   R30,R12
0002e4 05fd      	CPC  R31,R13
0002e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
0002e6 e0e8      	LDI  R30,LOW(8)
0002e7 e0f0      	LDI  R31,HIGH(8)
0002e8 15ec      	CP   R30,R12
0002e9 05fd      	CPC  R31,R13
0002ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xC:
0002eb 9aaa      	SBI  0x15,2
0002ec 9aac      	SBI  0x15,4
0002ed cfe6      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
0002ee 9aa9      	SBI  0x15,1
0002ef 9aad      	SBI  0x15,5
0002f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
0002f1 9aab      	SBI  0x15,3
0002f2 cffb      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xF:
0002f3 e0ea      	LDI  R30,LOW(10)
0002f4 93ea      	ST   -Y,R30
0002f5 cd8c      	RJMP _seg_display
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x10:
0002f6 e0e1      	LDI  R30,LOW(1)
0002f7 e0f0      	LDI  R31,HIGH(1)
0002f8 15e4      	CP   R30,R4
0002f9 05f5      	CPC  R31,R5
0002fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:38 WORDS
                 SUBOPT_0x11:
0002fb e0e0      	LDI  R30,LOW(0)
0002fc 93e0 016e 	STS  _cou_1s,R30
0002fe 93e0 016f 	STS  _cou_1s+1,R30
000300 e7a2      	LDI  R26,LOW(_cou_r_pre)
000301 e0b1      	LDI  R27,HIGH(_cou_r_pre)
000302 91ed      	LD   R30,X+
000303 91fd      	LD   R31,X+
000304 9731      	SBIW R30,1
000305 93fe      	ST   -X,R31
000306 93ee      	ST   -X,R30
000307 91e0 0172 	LDS  R30,_cou_r_pre
000309 91f0 0173 	LDS  R31,_cou_r_pre+1
00030b 70ef      	ANDI R30,LOW(0xF)
00030c 70f0      	ANDI R31,HIGH(0xF)
00030d 013f      	MOVW R6,R30
00030e 91a0 0172 	LDS  R26,_cou_r_pre
000310 91b0 0173 	LDS  R27,_cou_r_pre+1
000312 e0ea      	LDI  R30,LOW(10)
000313 e0f0      	LDI  R31,HIGH(10)
000314 d0b2      	RCALL __DIVW21
000315 70ef      	ANDI R30,LOW(0xF)
000316 70f0      	ANDI R31,HIGH(0xF)
000317 014f      	MOVW R8,R30
000318 91a0 0172 	LDS  R26,_cou_r_pre
00031a 91b0 0173 	LDS  R27,_cou_r_pre+1
00031c e6e4      	LDI  R30,LOW(100)
00031d e0f0      	LDI  R31,HIGH(100)
00031e d0a8      	RCALL __DIVW21
00031f 70ef      	ANDI R30,LOW(0xF)
000320 70f0      	ANDI R31,HIGH(0xF)
000321 015f      	MOVW R10,R30
000322 2c08      	MOV  R0,R8
000323 2809      	OR   R0,R9
000324 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0x12:
000325 e0ea      	LDI  R30,LOW(10)
000326 e0f0      	LDI  R31,HIGH(10)
000327 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000328 2c0a      	MOV  R0,R10
000329 280b      	OR   R0,R11
00032a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x14:
00032b dff9      	RCALL SUBOPT_0x12
00032c 015f      	MOVW R10,R30
00032d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x15:
00032e 91a0 016e 	LDS  R26,_cou_1s
000330 91b0 016f 	LDS  R27,_cou_1s+1
000332 9798      	SBIW R26,40
000333 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x16:
000334 e0e3      	LDI  R30,LOW(3)
000335 e0f0      	LDI  R31,HIGH(3)
000336 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x17:
000337 dfed      	RCALL SUBOPT_0x12
000338 014f      	MOVW R8,R30
000339 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
00033a efef      	LDI  R30,LOW(65535)
00033b efff      	LDI  R31,HIGH(65535)
00033c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
00033d 93e0 0172 	STS  _cou_r_pre,R30
00033f 93f0 0173 	STS  _cou_r_pre+1,R31
000341 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1A:
000342 dfe2      	RCALL SUBOPT_0x12
000343 013f      	MOVW R6,R30
000344 cff2      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1B:
000345 e0e2      	LDI  R30,LOW(2)
000346 e0f0      	LDI  R31,HIGH(2)
000347 15e4      	CP   R30,R4
000348 05f5      	CPC  R31,R5
000349 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x1C:
00034a e0e0      	LDI  R30,LOW(0)
00034b 93e0 016e 	STS  _cou_1s,R30
00034d 93e0 016f 	STS  _cou_1s+1,R30
00034f e7a4      	LDI  R26,LOW(_cou_g_pre)
000350 e0b1      	LDI  R27,HIGH(_cou_g_pre)
000351 91ed      	LD   R30,X+
000352 91fd      	LD   R31,X+
000353 9731      	SBIW R30,1
000354 93fe      	ST   -X,R31
000355 93ee      	ST   -X,R30
000356 91e0 0174 	LDS  R30,_cou_g_pre
000358 91f0 0175 	LDS  R31,_cou_g_pre+1
00035a 70ef      	ANDI R30,LOW(0xF)
00035b 70f0      	ANDI R31,HIGH(0xF)
00035c 013f      	MOVW R6,R30
00035d 91a0 0174 	LDS  R26,_cou_g_pre
00035f 91b0 0175 	LDS  R27,_cou_g_pre+1
000361 dfc3      	RCALL SUBOPT_0x12
000362 d064      	RCALL __DIVW21
000363 70ef      	ANDI R30,LOW(0xF)
000364 70f0      	ANDI R31,HIGH(0xF)
000365 014f      	MOVW R8,R30
000366 91a0 0174 	LDS  R26,_cou_g_pre
000368 91b0 0175 	LDS  R27,_cou_g_pre+1
00036a e6e4      	LDI  R30,LOW(100)
00036b e0f0      	LDI  R31,HIGH(100)
00036c d05a      	RCALL __DIVW21
00036d 70ef      	ANDI R30,LOW(0xF)
00036e 70f0      	ANDI R31,HIGH(0xF)
00036f 015f      	MOVW R10,R30
000370 2c08      	MOV  R0,R8
000371 2809      	OR   R0,R9
000372 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
000373 93e0 0174 	STS  _cou_g_pre,R30
000375 93f0 0175 	STS  _cou_g_pre+1,R31
000377 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1E:
000378 dfbb      	RCALL SUBOPT_0x16
000379 15e4      	CP   R30,R4
00037a 05f5      	CPC  R31,R5
00037b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1F:
00037c e0e0      	LDI  R30,LOW(0)
00037d 93e0 016e 	STS  _cou_1s,R30
00037f 93e0 016f 	STS  _cou_1s+1,R30
000381 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x20:
000382 e7a6      	LDI  R26,LOW(_cou_y_pre)
000383 e0b1      	LDI  R27,HIGH(_cou_y_pre)
000384 91ed      	LD   R30,X+
000385 91fd      	LD   R31,X+
000386 9731      	SBIW R30,1
000387 93fe      	ST   -X,R31
000388 93ee      	ST   -X,R30
000389 91e0 0176 	LDS  R30,_cou_y_pre
00038b 91f0 0177 	LDS  R31,_cou_y_pre+1
00038d 70ef      	ANDI R30,LOW(0xF)
00038e 70f0      	ANDI R31,HIGH(0xF)
00038f 013f      	MOVW R6,R30
000390 cfa6      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
000391 93e0 0176 	STS  _cou_y_pre,R30
000393 93f0 0177 	STS  _cou_y_pre+1,R31
000395 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x22:
000396 91ed      	LD   R30,X+
000397 91fd      	LD   R31,X+
000398 9631      	ADIW R30,1
000399 93fe      	ST   -X,R31
00039a 93ee      	ST   -X,R30
00039b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x23:
00039c 91a0 017c 	LDS  R26,_kds_cv
00039e 91b0 017d 	LDS  R27,_kds_cv+1
0003a0 d039      	RCALL __CPW02
0003a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
0003a2 e0e0      	LDI  R30,LOW(0)
0003a3 93e0 017c 	STS  _kds_cv,R30
0003a5 93e0 017d 	STS  _kds_cv+1,R30
0003a7 cdbd      	RJMP _calculate
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x25:
0003a8 e0e0      	LDI  R30,LOW(0)
0003a9 d005      	RCALL __EQB12
0003aa 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
0003ab 95f1      	NEG  R31
0003ac 95e1      	NEG  R30
0003ad 40f0      	SBCI R31,0
0003ae 9508      	RET
                 
                 __EQB12:
0003af 17ea      	CP   R30,R26
0003b0 e0e1      	LDI  R30,1
0003b1 f009      	BREQ __EQB12T
0003b2 27ee      	CLR  R30
                 __EQB12T:
0003b3 9508      	RET
                 
                 __DIVW21U:
0003b4 2400      	CLR  R0
0003b5 2411      	CLR  R1
0003b6 e190      	LDI  R25,16
                 __DIVW21U1:
0003b7 0faa      	LSL  R26
0003b8 1fbb      	ROL  R27
0003b9 1c00      	ROL  R0
0003ba 1c11      	ROL  R1
0003bb 1a0e      	SUB  R0,R30
0003bc 0a1f      	SBC  R1,R31
0003bd f418      	BRCC __DIVW21U2
0003be 0e0e      	ADD  R0,R30
0003bf 1e1f      	ADC  R1,R31
0003c0 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003c1 60a1      	SBR  R26,1
                 __DIVW21U3:
0003c2 959a      	DEC  R25
0003c3 f799      	BRNE __DIVW21U1
0003c4 01fd      	MOVW R30,R26
0003c5 01d0      	MOVW R26,R0
0003c6 9508      	RET
                 
                 __DIVW21:
0003c7 d004      	RCALL __CHKSIGNW
0003c8 dfeb      	RCALL __DIVW21U
0003c9 f40e      	BRTC __DIVW211
0003ca dfe0      	RCALL __ANEGW1
                 __DIVW211:
0003cb 9508      	RET
                 
                 __CHKSIGNW:
0003cc 94e8      	CLT
0003cd fff7      	SBRS R31,7
0003ce c002      	RJMP __CHKSW1
0003cf dfdb      	RCALL __ANEGW1
0003d0 9468      	SET
                 __CHKSW1:
0003d1 ffb7      	SBRS R27,7
0003d2 c006      	RJMP __CHKSW2
0003d3 95a0      	COM  R26
0003d4 95b0      	COM  R27
0003d5 9611      	ADIW R26,1
0003d6 f800      	BLD  R0,0
0003d7 9403      	INC  R0
0003d8 fa00      	BST  R0,0
                 __CHKSW2:
0003d9 9508      	RET
                 
                 __CPW02:
0003da 2400      	CLR  R0
0003db 160a      	CP   R0,R26
0003dc 060b      	CPC  R0,R27
0003dd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  28 r1 :   7 r2 :  12 r3 :   0 r4 :   8 r5 :   4 r6 :   7 r7 :   0 
r8 :   8 r9 :   2 r10:   6 r11:   1 r12:   7 r13:   6 r14:   0 r15:   2 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:   9 r25:   6 r26:  77 r27:  32 r28:   2 r29:   1 r30: 222 r31:  84 
x  :  19 y  :  44 z  :   7 
Registers used: 26 out of 35 (74.3%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   3 and   :   2 andi  :  14 asr   :   0 bclr  :   0 bld   :   9 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   6 
brge  :  27 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :  12 brmi  :   0 brne  :  33 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 cbi   :   7 
cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :   8 
cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   2 cp    :  14 
cpc   :  27 cpi   :  14 cpse  :   0 dec   :   2 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 
inc   :   1 ld    :  26 ldd   :   0 ldi   : 113 lds   :  49 lpm   :   7 
lsl   :   1 lsr   :   0 mov   :   5 movw  :  21 mul   :   0 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   4 ori   :   0 out   :  38 
pop   :   0 push  :   0 rcall : 159 ret   :  42 reti  :   2 rjmp  :  77 
rol   :   3 ror   :   0 sbc   :   1 sbci  :   1 sbi   :  25 sbic  :   7 
sbis  :   1 sbiw  :  11 sbr   :   1 sbrc  :   3 sbrs  :   3 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   5 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  37 std   :   0 
sts   :  32 sub   :   1 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 53 out of 114 (46.5%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007bc   1904     76   1980    8192  24.2%
[.dseg] 0x000060 0x000194      0     52     52    1119   4.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
